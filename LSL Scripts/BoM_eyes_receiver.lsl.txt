// BoM_eyes_receiver.lsl
// Assigns Bakes on Mesh texture to Eyes
//*********************************************************************************    
//**   Copyright (C) 2017  Shin Ingen
//**   Heavily modified by Sean Heavy for Bakes on Mesh
//**
//**   This program is free software: you can redistribute it and/or modify
//**   it under the terms of the GNU Affero General Public License as
//**   published by the Free Software Foundation, either version 3 of the
//**   License, or (at your option) any later version.
//**
//**   This program is distributed in the hope that it will be useful,
//**   but WITHOUT ANY WARRANTY; without even the implied warranty of
//**   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**   GNU Affero General Public License for more details.
//**
//**   You should have received a copy of the GNU Affero General Public License
//**   along with this program.  If not, see <https://www.gnu.org/licenses/>
//*********************************************************************************    
// Set debug_on_1 to 1 if you want to get debug info
integer debug_on_1 = 0;
//
//safe character set for encryption
string ASCII = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
//convert integer to characters
string chr(integer i) {
    if (debug_on_1 == 1) llOwnerSay("Chr's="+llGetSubString(ASCII, i, i));
    return llGetSubString(ASCII, i, i);
}
integer min(integer x, integer y) {
    if( y < x ) return y;
    return x;
}
integer max(integer x, integer y) {
    if( y > x ) return y;
    return x;
}
//for generating a random string.
string salt(integer amount) {
    string salt = "";
    integer i;
    //for length of salt , generate characters
    for(i = 0; i < amount; i++) {
        salt += chr((integer)llFrand(llStringLength(ASCII)));
    }
    if (debug_on_1 == 1) llOwnerSay("Salt="+salt);
    return salt;
} 

integer my_channel; // Debugging/misc
integer eyes_channel = -310475451;
//integer leftArm_channel = -149475421;
//integer leftLeg_channel = -240124056;

string my_pass;
string dMessage;
list listMsgNoSalt;
string msgNoSalt;
list listCmdPrms;
integer intCmdPrmsLength;
string strCommand;
string strCommandParam1 = "";
string strCommandParam2 = "";
string strCommandParam3 = "";
string strCommandParam4 = "";
integer intLinkNum;
string strTUUID;
integer intFace;
integer intAlphaMode = 0;
integer intAlphaLevel;
string strAlphaLevel;
list listPrimAlphaMode;
integer a;
integer b;
integer i;
integer x;
string descflag;
string textureid;

default {
    state_entry() {
        eyes_channel = -310475451;
        //leftArm_channel = -149475421;
        //leftLeg_channel = -240124056;
        my_pass = "%WTb9i#K482l&o3AHnhrhTZz3i%HT!8xL5!5H@LJnUx!8!XWeniGvifpz8j%a&*K";
        if (debug_on_1 == 1) {
            llOwnerSay("listening on baked eyes channel:"+(string)eyes_channel);
            //llOwnerSay("listening on baked LeftArm channel:"+(string)leftArm_channel);
            //llOwnerSay("listening on baked LeftLeg channel:"+(string)leftLeg_channel);
        }
        llListen(eyes_channel, "", "", "" );
        //llListen(leftArm_channel, "", "", "" );
        //llListen(leftLeg_channel, "", "", "" );
    }

    on_rez(integer param) {
        llResetScript();
    }

    listen(integer channel,string name, key id, string message) {
        if (debug_on_1 == 1) llOwnerSay("message="+message+" on channel="+(string)channel);
        if (llGetOwnerKey(id) != llGetOwner()) {
            llOwnerSay("Owners Don't Match");
            return;
        }
        // DeCrypting the data and say back to owner: Remember to remove the salt when needed ;)
        dMessage = llBase64ToString(llXorBase64(message, llStringToBase64(my_pass))); // SL
        //dMessage = llBase64ToString(llXorBase64StringsCorrect(message, llStringToBase64(my_pass))); // OS
        listMsgNoSalt = llParseString2List(dMessage, ["||"], []);
        msgNoSalt = llList2String(listMsgNoSalt, 0);
        if (debug_on_1 == 1) llOwnerSay("msg="+msgNoSalt);
        listCmdPrms = llParseString2List(msgNoSalt, ["::"], []);
        intCmdPrmsLength = llGetListLength(listCmdPrms);
        strCommand = llList2String(listCmdPrms, 0);
        if (intCmdPrmsLength > 1) { strCommandParam1 = llList2String(listCmdPrms, 1); }
        if (intCmdPrmsLength > 2) { strCommandParam2 = llList2String(listCmdPrms, 2); }
        if (intCmdPrmsLength > 3) { strCommandParam3 = llList2String(listCmdPrms, 3); }
        if (intCmdPrmsLength > 4) { strCommandParam4 = llList2String(listCmdPrms, 4); }
        intLinkNum = 0; // 0 is root prim
        intFace = ALL_SIDES; // This may be modified depending on setup of item
        intAlphaLevel = 0;

        if (debug_on_1 == 1) llOwnerSay("Cmd received="+strCommand);
        if (strCommand == "TEXTURE") {
            if (channel == eyes_channel) {
                if (debug_on_1 == 1) llOwnerSay("TEXTURE for baked eyes cmd received");
                // Need to iterate thru all the eye parts
                descflag = "EYES";
                textureid = strCommandParam1;
                x = llGetNumberOfPrims()+1;
                for (i = 0; i < x; ++i) {
                    list paramlist = llGetObjectDetails(llGetLinkKey(i), [OBJECT_DESC,OBJECT_NAME]);
                    string objdesc = llToUpper(llList2String(paramlist,0));
                    string objname = llList2String(paramlist,1);
                    if (objdesc == descflag) {
                        if (debug_on_1 == 1) llOwnerSay("I heard your Upper message:"+descflag+" "+objdesc+" "+textureid);
                        llSetLinkPrimitiveParamsFast(i, [PRIM_TEXTURE, ALL_SIDES, textureid, <1,1,0>, <0,0,0>, 0]);
                        if (debug_on_1 == 1) llOwnerSay("Upper says: Changed " + objname + " texture.");
                        llSetPrimitiveParams(
                                [PRIM_ALPHA_MODE,ALL_SIDES,intAlphaMode,0,
                                PRIM_COLOR, ALL_SIDES, <1.0, 1.0, 1.0>, 1.0 ]);
                    }
                }
            } else { llOwnerSay("ERROR with skin channel used. Channel="+(string)channel); }
        }
    }
}
